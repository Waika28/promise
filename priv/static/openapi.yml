openapi: "3.0.1"
info:
  title: Promise
  version: "1.0"
servers:
  - url: https://test.promise.waika28.ru
  - url: https://promise.waika28.ru
  - url: http://localhost
paths:
  /api/users:
    get:
      tags:
        - users
      summary: Index users
      responses:
        "200":
          description: Users data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserInResponseData"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - users
        - authorization
      summary: Register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "201":
          description: Registration complete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
  /api/users/{id}:
    get:
      tags:
        - users
      summary: Show user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
        default:
          $ref: "#/components/responses/Default"
  /api/profile:
    get:
      tags:
        - profile
        - users
      summary: Show current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - profile
        - users
      summary: Edit current user
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/UserBase"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - profile
        - users
      summary: Delete current user
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User deleted
        default:
          $ref: "#/components/responses/Default"
  /api/tokens:
    post:
      tags:
        - authorization
      summary: Create user token
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "201":
          description: "User authorization successfull"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        default:
          $ref: "#/components/responses/Default"
  /api/goals:
    get:
      tags:
        - goals
      summary: Index current user's goals
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Returned list of goals"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - goals
      summary: Create goal
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoalRequest"
      responses:
        "201":
          description: Goal created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
  /api/goals/{id}:
    get:
      tags:
        - goals
      summary: Show goal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Goal data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - goals
      summary: Edit goal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                goal:
                  $ref: "#/components/schemas/GoalBase"
      responses:
        "200":
          description: Goal data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - goals
      summary: Delete goal
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: Goal deleted
        default:
          $ref: "#/components/responses/Default"
  /api/goals/{goal_id}/posts:
    get:
      tags:
        - goal_posts
      summary: Index goal's posts
      security:
        - bearerAuth: []
      parameters:
        - name: goal_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: "Returned list of posts"
        default:
          $ref: "#/components/responses/Default"
    post:
      tags:
        - goal_posts
      summary: Create post
      security:
        - bearerAuth: []
      parameters:
        - name: goal_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoalPostRequest"
      responses:
        "201":
          description: Post created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalPostRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
  /api/goals/{goal_id}/posts/{post_id}:
    get:
      tags:
        - goal_posts
      summary: Show post
      security:
        - bearerAuth: []
      parameters:
        - name: goal_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: post_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Post data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalPostResponse"
        default:
          $ref: "#/components/responses/Default"
    put:
      tags:
        - goal_posts
      summary: Edit post
      security:
        - bearerAuth: []
      parameters:
        - name: goal_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: post_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  $ref: "#/components/schemas/GoalPostBase"
      responses:
        "200":
          description: Post data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalPostResponse"
        "422":
          $ref: "#/components/responses/ValidationError"
        default:
          $ref: "#/components/responses/Default"
    delete:
      tags:
        - goal_posts
      summary: Delete post
      security:
        - bearerAuth: []
      parameters:
        - name: goal_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
        - name: post_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: Post deleted
        default:
          $ref: "#/components/responses/Default"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Default:
      description: Default error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericErrorResponse"
    ValidationError:
      description: Invalid data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DataValidatingErrorResponse"
  schemas:
    UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    GenericErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          example: "Bad request"
        message:
          type: string
          example: "Some info about error"
    DataValidatingErrorResponse:
      type: object
      required:
        - errors
      properties:
        errors:
          type: object
          properties:
            field_name:
              type: array
              items:
                type: string
                example: invalid format
    UserBase:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Piotr
        last_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Makarov
        email:
          type: string
          format: email
          pattern: ".+@.+"
          example: piotr.makarov@gmail.com
        city:
          type: string
          pattern: "^[\\p{L}\\-']+$"
          example: Yekaterinburg
        bio:
          type: string
          description: "Attention: Cannot contains trailing or leading spaces"
          example: >-
            Hello, I'm 18 y.o. React programmer!
            I love JS and all relaited stuff.
    UserInResponseData:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/UUID"
    RegistrationRequest:
      type: object
      properties:
        user:
          allOf:
            - $ref: "#/components/schemas/UserBase"
            - type: object
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: 123456789
              required:
                - first_name
                - last_name
                - email
                - password
    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UserInResponseData"
    AuthRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              example: piotr.makarov@gmail.com
            password:
              type: string
              format: password
              minLength: 8
              example: 123456789
    TokenResponse:
      type: object
      properties:
        data:
          properties:
            token:
              type: string
              format: JWT
              example: qwerty.asdfgh.zxcvbn
    GoalBase:
      type: object
      properties:
        title:
          type: string
          example: "I want to become a senior react programmer"
        deadline:
          type: string
          format: date-time
          example: 2024-06-23T23:00
          description: Should be after now
    GoalRequest:
      type: object
      properties:
        goal:
          $ref: "#/components/schemas/GoalBase"
    GoalResponse:
      type: object
      properties:
        data:
          allOf:
            - type: object
              properties:
                id:
                  $ref: "#/components/schemas/UUID"
                user_id:
                  allOf:
                    - description: Owner of the goal
                    - $ref: "#/components/schemas/UUID"
                inserted_at:
                  type: string
                  format: date-time
                  example: 2024-06-23T23:00
            - $ref: "#/components/schemas/GoalBase"
    GoalPostBase:
      type: object
      properties:
        text:
          type: string
          maxLength: 2000
    GoalPostRequest:
      type: object
      properties:
        post:
          $ref: "#/components/schemas/GoalPostBase"
    GoalPostResponse:
      type: object
      properties:
        data:
          allOf:
            - type: object
              properties:
                id:
                  $ref: "#/components/schemas/UUID"
                goal_id:
                  allOf:
                    - description: Related goal
                    - $ref: "#/components/schemas/UUID"
            - $ref: "#/components/schemas/GoalPostBase"
