openapi: "3.0.1"
info:
  title: Promise
  version: "1.0"
servers:
  - url: https://test.promise.waika28.ru
  - url: https://promise.waika28.ru
  - url: http://localhost
paths:
  /api/users:
    get:
      tags:
        - users
      summary: Get list of users
      responses:
        "200":
          description: Users data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserResponseData"
    post:
      tags:
        - users
        - registration
      summary: Register user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        "201":
          description: Registration complete
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataValidatingErrorResponse"
  /api/users/{id}:
    get:
      tags:
        - users
      summary: Show user data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
        "404":
          description: There is no this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
  /api/profile:
    get:
      tags:
        - profile
        - users
      summary: "Get current user data"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
        - profile
        - users
      summary: "Edit current user data"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/UserBase"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataValidatingErrorResponse"
    delete:
      tags:
        - profile
        - users
      summary: "Delete user"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User deleted
  /api/tokens:
    post:
      tags:
        - authorization
        - registration
        - tokens
      summary: "Returns user token"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        "201":
          description: "User authorization successfull"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Possibly wrong email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "422":
          description: Wrong data format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "500":
          description: >
            This happens when the server fails to generate a token, this usually does not
            occur
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
  /api/goals:
    get:
      tags:
        - goals
      summary: "Get all of the current user goals"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "Returned list of goals"
    post:
      tags:
        - goals
      summary: "Create new goal"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoalRequest"
      responses:
        "201":
          description: Goal created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataValidatingErrorResponse"
  /api/goals/{id}:
    get:
      tags:
        - goals
      summary: "Get goal data"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: Goal data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
    put:
      tags:
        - goals
      summary: "Edit goal data"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                goal:
                  $ref: "#/components/schemas/GoalBase"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GoalResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericErrorResponse"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataValidatingErrorResponse"
    delete:
      tags:
        - goals
      summary: "Delete goal"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "204":
          description: Goal deleted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    TokenResponse:
      type: object
      properties:
        data:
          properties:
            token:
              type: string
              format: JWT
              example: qwerty.asdfgh.zxcvbn
    GenericErrorResponse:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          example: "Bad request"
        message:
          type: string
          example: "Some info about error"
    DataValidatingErrorResponse:
      type: object
      required:
        - errors
      properties:
        errors:
          type: object
          properties:
            field_name:
              type: array
              items:
                type: string
                example: invalid format
    UserBase:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Piotr
        last_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Makarov
        email:
          type: string
          format: email
          pattern: ".+@.+"
          example: piotr.makarov@gmail.com
        city:
          type: string
          pattern: "^[\\p{L}\\-']+$"
          example: Yekaterinburg
        bio:
          type: string
          description: "Attention: Cannot contains trailing or leading spaces"
          example: >-
            Hello, I'm 18 y.o. React programmer!
            I love JS and all relaited stuff.
    UserResponseData:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/UUID"
    RegistrationRequest:
      type: object
      properties:
        user:
          allOf:
            - $ref: "#/components/schemas/UserBase"
            - type: object
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: 123456789
              required:
                - first_name
                - last_name
                - email
                - password
    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UserResponseData"
    AuthRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              example: piotr.makarov@gmail.com
            password:
              type: string
              format: password
              minLength: 8
              example: 123456789
    GoalBase:
      type: object
      properties:
        title:
          type: string
          example: "I want to become a senior react programmer"
    GoalRequest:
      type: object
      properties:
        goal:
          $ref: "#/components/schemas/GoalBase"
    GoalResponse:
      type: object
      properties:
        data:
          allOf:
            - type: object
              properties:
                id:
                  $ref: "#/components/schemas/UUID"
                user_id:
                  allOf:
                    - description: Owner of the goal
                    - $ref: "#/components/schemas/UUID"
            - $ref: "#/components/schemas/GoalBase"

