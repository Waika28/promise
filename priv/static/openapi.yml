openapi: "3.0.1"
info:
  title: Promise
  version: "1.0"
servers:
  - url: https://test.promise.waika28.ru
  - url: https://promise.waika28.ru
paths:
  /api/users:
    get:
      tags:
        - users
      summary: Get list of users
      responses:
        "200":
          description: Users data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserResponse"
    post:
      tags:
        - users
        - registration
      summary: Register user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/UserRegistrationParams"
      responses:
        "201":
          description: Registration complete
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegistrationError"
  /api/users/{id}:
    get:
      tags:
        - users
      summary: Show user data
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/UUID"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
        "404":
          description: There is no this user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
  /api/profile:
    get:
      tags:
        - profile
        - users
      summary: "Get current user data"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
    put:
      tags:
        - profile
        - users
      summary: "Edit current user data"
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/UserBase"
      responses:
        "200":
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/UserResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "422":
          description: Invalid data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DataEditingError"
    delete:
      tags:
        - profile
        - users
      summary: "Delete user"
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User deleted
  /api/tokens:
    post:
      tags:
        - authorization
        - registration
        - tokens
      summary: "Returns user cookie"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/AuthParams"
      responses:
        "201":
          description: "User authorization successfull"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/TokenResponse"
        "401":
          description: Possibly wrong email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "422":
          description: Wrong data format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"
        "500":
          description: >
            This happens when the server fails to generate a token, this usually does not
            occur
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GenericError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000
    TokenResponse:
      type: object
      properties:
        token:
          type: string
          format: JWT
          example: qwerty.asdfgh.zxcvbn
    GenericError:
      type: object
      required:
        - detail
      properties:
        detail:
          type: string
          example: "Bad request"
        message:
          type: string
          example: "Email has already been taken"
    DataEditingError:
      type: object
      required:
        - errors
      properties:
        errors:
          type: object
          properties:
            first_name:
              type: array
              items:
                type: string
            last_name:
              type: array
              items:
                type: string
            email:
              type: array
              items:
                type: string
    RegistrationError:
      allOf:
        - $ref: "#/components/schemas/DataEditingError"
        - type: object
          required:
            - errors
          properties:
            errors:
              type: object
              properties:
                password:
                  type: array
                  items:
                    type: string
    UserBase:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Piotr
        last_name:
          type: string
          maxLength: 20
          pattern: "^[\\p{L}\\-']+$"
          example: Makarov
        email:
          type: string
          format: email
          pattern: ".+@.+"
          example: piotr.makarov@gmail.com
        city:
          type: string
          pattern: "^[\\p{L}\\-']+$"
          example: Yekaterinburg
        bio:
          type: string
          description: "Attention: Cannot contains trailing or leading spaces"
          example: >-
            Hello, I'm 18 y.o. React programmer!
            I love JS and all relaited stuff.
    UserRegistrationParams:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            password:
              type: string
              format: password
              minLength: 8
              example: 123456789
          required:
            - first_name
            - last_name
            - email
            - password
    UserResponse:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/UUID"
          required:
            - id
            - first_name
            - last_name
            - email
            - bio
            - city
    AuthParams:
      type: object
      properties:
        email:
          type: string
          format: email
          example: piotr.makarov@gmail.com
        password:
          type: string
          format: password
          minLength: 8
          example: 123456789
